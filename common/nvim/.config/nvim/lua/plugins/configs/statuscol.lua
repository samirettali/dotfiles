-- -- local gitsigns_bar = '│'
-- --
-- -- local gitsigns_hl_pool = {
-- --     GitSignsAdd          = "GitSignsAdd",
-- --     GitSignsChange       = "DiagnosticWarn",
-- --     GitSignsChangedelete = "DiagnosticWarn",
-- --     GitSignsDelete       = "DiagnosticError",
-- --     GitSignsTopdelete    = "DiagnosticError",
-- --     GitSignsUntracked    = "NonText",
-- -- }
-- --
-- -- local diag_signs_icons = {
-- --     DiagnosticSignError = " ",
-- --     DiagnosticSignWarn = " ",
-- --     DiagnosticSignInfo = " ",
-- --     DiagnosticSignHint = "",
-- --     DiagnosticSignOk = " "
-- -- }
-- --
-- -- local function get_sign_name(cur_sign)
-- --     if (cur_sign == nil) then
-- --         return nil
-- --     end
-- --
-- --     cur_sign = cur_sign[1]
-- --
-- --     if (cur_sign == nil) then
-- --         return nil
-- --     end
-- --
-- --     cur_sign = cur_sign.signs
-- --
-- --     if (cur_sign == nil) then
-- --         return nil
-- --     end
-- --
-- --     cur_sign = cur_sign[1]
-- --
-- --     if (cur_sign == nil) then
-- --         return nil
-- --     end
-- --
-- --     return cur_sign["name"]
-- -- end
-- --
-- -- local function mk_hl(group, sym)
-- --     return table.concat({ "%#", group, "#", sym, "%*" })
-- -- end
-- --
-- -- local function get_name_from_group(bufnum, lnum, group)
-- --     local cur_sign_tbl = vim.fn.sign_getplaced(bufnum, {
-- --         group = group,
-- --         lnum = lnum
-- --     })
-- --
-- --     return get_sign_name(cur_sign_tbl)
-- -- end
-- --
-- -- _G.get_statuscol_gitsign = function(bufnr, lnum)
-- --     local cur_sign_nm = get_name_from_group(bufnr, lnum, "gitsigns_vimfn_signs_")
-- --
-- --     if cur_sign_nm ~= nil then
-- --         return mk_hl(gitsigns_hl_pool[cur_sign_nm], gitsigns_bar)
-- --     else
-- --         return " "
-- --     end
-- -- end
-- --
-- -- _G.get_statuscol_diag = function(bufnum, lnum)
-- --     local cur_sign_nm = get_name_from_group(bufnum, lnum, "*")
-- --
-- --     if cur_sign_nm ~= nil and vim.startswith(cur_sign_nm, "DiagnosticSign") then
-- --         return mk_hl(cur_sign_nm, diag_signs_icons[cur_sign_nm])
-- --     else
-- --         return " "
-- --     end
-- -- end
-- --
-- -- -- _G.get_statuscol = function()
-- -- --     local str_table = {}
-- -- --
-- -- --     local parts = {
-- -- --         ["diagnostics"] = "%{%v:lua.get_statuscol_diag(bufnr(), v:lnum)%}",
-- -- --         ["fold"] = "%C",
-- -- --         ["gitsigns"] = "%{%v:lua.get_statuscol_gitsign(bufnr(), v:lnum)%}",
-- -- --         ["num"] = "%{v:relnum?v:relnum:v:lnum}",
-- -- --         ["sep"] = "%=",
-- -- --         ["signcol"] = "%s",
-- -- --         ["space"] = " "
-- -- --     }
-- -- --
-- -- --     local order = {
-- -- --         "diagnostics",
-- -- --         "space",
-- -- --         "gitsigns",
-- -- --         "sep",
-- -- --         "num",
-- -- --         "space",
-- -- --         "fold",
-- -- --     }
-- -- --
-- -- --     for _, val in ipairs(order) do
-- -- --         table.insert(str_table, parts[val])
-- -- --     end
-- -- --
-- -- --     return table.concat(str_table)
-- -- -- end


-- local M = {}
-- _G.Status = M
--
-- ---@return {name:string, text:string, texthl:string}[]
-- function M.get_signs()
--   local buf = vim.api.nvim_win_get_buf(vim.g.statusline_winid)
--   return vim.tbl_map(function(sign)
--     return vim.fn.sign_getdefined(sign.name)[1]
--   end, vim.fn.sign_getplaced(buf, { group = "*", lnum = vim.v.lnum })[1].signs)
-- end
--
-- function M.column()
--   local sign, git_sign
--   for _, s in ipairs(M.get_signs()) do
--     if s.name:find("GitSign") then
--       git_sign = s
--     else
--       sign = s
--     end
--   end
--   local components = {
--     sign and ("%#" .. sign.texthl .. "#" .. sign.text .. "%*") or " ",
--     [[%=]],
--     [[%{&nu?(&rnu&&v:relnum?v:relnum:v:lnum):''} ]],
--     git_sign and ("%#" .. git_sign.texthl .. "#" .. git_sign.text .. "%*") or "  ",
--   }
--   return table.concat(components, "")
-- end
--
-- vim.opt.statuscolumn = [[%!v:lua.Status.column()]]
--
-- -- return M
