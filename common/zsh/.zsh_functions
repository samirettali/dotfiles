# Create new tmux session with name if passed
t() {
    if [ -z "$1" ]; then
        tmux
    else
        tmux new -A -s "$1"
    fi
}

# Throw away directory
tad() {
    local ts=$(date +%s)
    local d="$HOME/.throw-away/$ts"
    mkdir -p "$d"
    (cd "$d"; zsh -c tmux)
    rm -rf "$d"
}

# Add extension to all files in a directory
add_extension() {
    find . -type f -exec mv '{}' '{}'.$1 \;
}

# Go to git repository root
gr() {
    readonly old_pwd="$PWD"
    while [[ 1 ]]; do
        cd ..
        if [[ "$PWD" == "/" ]]; then
            cd "$old_pwd"
            echo "No repository found, returned to $PWD"
            return 1
        fi
        for repo in ".git" ".hg"; do
            if [[ -d "$repo" ]]; then
                echo "Found $repo at $PWD"
                return 0
            fi
        done
    done
}

# Backup file
bak() {
    declare target=$1;
    if [[ "${target:0-1}" = "/" ]]; then
        target=${target%%/}; # Strip trailing / of directories
    fi
    cp -r -v $target{,.bak}
}

# Foreground and background switching
fg-bg() {
  if [[ $#BUFFER -eq 0 ]]; then
    fg
  else
    zle push-input
  fi
}

# Start a simple web server in the current directory
http() {
    local port="${1:-8000}"
    python3 -m http.server $port
}

# Function that starts my Kali Linux container
kali() {
    declare -A ports

    image="samirettali/kali"
    container_name="kali"
    ports[kali]="4000-4010"
    ports[ctf]="9000-9010"

    if [[ ! -z "${1}" ]] && [[ "${1}" == "ctf" ]]; then
        image="samirettali/kali:ctf"
        container_name="ctf"
    fi

    if [[ $(docker container inspect -f '{{.State.Status}}' "${image}" 2>/dev/null) == 'exited' ]]; then
        docker start -a "${container_name}"
    elif [[ $(docker container inspect -f '{{.State.Status}}' "${image}" 2>/dev/null) == 'running' ]]; then
        docker exec -it "${container_name}" ./entrypoint.sh
    elif [[ -z $(docker ps --filter "name=${container_name}" --format '{{.Names}}' 2>/dev/null) ]]; then
        docker run -it \
            --name "${container_name}" \
            -v $HOME/hacking:/root/hacking \
            -v $HOME/dev/recon:/root/recon \
            -p "${ports[$container_name]}":"${ports[$container_name]}" \
            samirettali/kali
    else
        echo "Container is probably starting, wait..."
    fi
}

# Test coverage for Go
gotest() {
    go test -cover -coverprofile=c.out
    go tool cover -html=c.out -o coverage.html
}

gobench() {
    go test -bench=. -cpuprofile=cpu.out
}

gocheck() {
    go vet .
    errcheck .
    golangci-lint run
    goconst ./...
}

ntr() {
    # TODO add -d
      find . -path "./.git" -prune -o -path './node_modules' -prune -o -type f -print | entr -csr \"${@}\"
}

j() {
    javac "${1}" && java "${1%.java}" && rm "${1%.java}.class"
}

pss() {
    ps auxww | grep -i "${@}" | grep -v grep
}
