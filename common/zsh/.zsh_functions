# Create new tmux session with name if passed
t() {
    if [ -z "$1" ]; then
        tmux
    else
        tmux new -A -s "$1"
    fi
}

# Throw away directory
tad() {
    local ts=$(date +%s)
    local d="$HOME/.throw-away/$ts"
    mkdir -p "$d"
    (cd "$d"; zsh -c tmux)
    rm -rf "$d"
}

# Add extension to all files in a directory
add_extension() {
    find . -type f -exec mv '{}' '{}'.$1 \;
}

# Go to git repository root
gr() {
    readonly old_pwd="$PWD"
    while [[ 1 ]]; do
        cd ..
        if [[ "$PWD" == "/" ]]; then
            cd "$old_pwd"
            echo "No repository found, returned to $PWD"
            return 1
        fi
        for repo in ".git" ".hg"; do
            if [[ -d "$repo" ]]; then
                echo "Found $repo at $PWD"
                return 0
            fi
        done
    done
}

# Backup file
bak() {
    declare target=$1;
    if [[ "${target:0-1}" = "/" ]]; then
        target=${target%%/}; # Strip trailing / of directories
    fi
    cp -r -v $target{,.bak}
}

up() {
  cd $(printf "%0.s../" $(seq 1 $1 ));
}

# Foreground and background switching
fg-bg() {
  if [[ $#BUFFER -eq 0 ]]; then
    fg
  else
    zle push-input
  fi
}

# Function that starts my Kali Linux container
kali() {
    if [[ $(docker container inspect -f '{{.State.Status}}' kali 2>/dev/null) == 'exited' ]]; then
        docker start -a kali
    elif [[ $(docker container inspect -f '{{.State.Status}}' kali 2>/dev/null) == 'running' ]]; then
        docker exec -it kali ./entrypoint.sh
    elif [[ -z $(docker ps --filter 'name=kali' --format '{{.Names}}' 2>/dev/null) ]]; then
        docker run -it \
            --name kali \
            -v $HOME/hacking:/root/hacking \
            -v $HOME/dev/recon:/root/recon \
            -p 4000-4010:4000-4010 \
            samirettali/kali
    else
        echo "Container is probably starting, wait..."
    fi
}

# Function that starts my Kali Linux container
ctf() {
    if [[ $(docker container inspect -f '{{.State.Status}}' ctf 2>/dev/null) == 'exited' ]]; then
        docker start -a ctf
    elif [[ $(docker container inspect -f '{{.State.Status}}' ctf 2>/dev/null) == 'running' ]]; then
        docker exec -it ctf ./entrypoint.sh
    elif [[ -z $(docker ps --filter 'name=ctf' --format '{{.Names}}' 2>/dev/null) ]]; then
        docker run -it \
            --name ctf \
            -v $HOME/hacking:/root/hacking \
            -p 9000-9010:9000-9010 \
            samirettali/kali:ctf
    else
        echo "Container is probably starting, wait..."
    fi
}

# Test coverage for Go
gotestcover() {
    go test -cover -coverprofile=c.out ./...
    go tool cover -html=c.out -o coverage.html
}

gobench() {
    go test -bench=. -cpuprofile=cpu.out
}

gocheck() {
    go vet ./...
    errcheck .
    golangci-lint run
    goconst ./...
}

r () {
        input="$*"
        find . -path "./.git" -prune -o -path './node_modules' -prune -o -path "**/bin" -prune -o -path "**/obj" -prune -o -type f -print | entr -csr "${input}"
}


j() {
    javac "${1}" && java "${1%.java}" && rm "${1%.java}.class"
}

pss() {
    ps auxww | grep -i "${@}" | grep -v grep
}

mc() {
  mkdir "${1}" && cd "${1}"
}

loadenv() {
  if [[ -f .env ]]; then
    export $(echo $(cat .env | sed 's/#.*//g'| xargs) | envsubst)
    length=$(wc -l < .env)
    echo "Loaded ${length} variables"
  fi

}

randombg() {
  color=$(echo "#$(openssl rand -hex 3)")
  echo "${color}"
  hsetroot -solid "${color}"
}

take() {
    mkdir -p "${1}"
    cd "${1}"
}
